<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ElderJames&#39; Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://elderjames.github.io/"/>
  <updated>2017-07-25T08:46:14.448Z</updated>
  <id>https://elderjames.github.io/</id>
  
  <author>
    <name>James Yeung</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello Hexo!</title>
    <link href="https://elderjames.github.io/2017/07/25/hello-Hexo.html"/>
    <id>https://elderjames.github.io/2017/07/25/hello-Hexo.html</id>
    <published>2017-07-25T06:37:50.476Z</published>
    <updated>2017-07-25T08:46:14.448Z</updated>
    
    <content type="html"><![CDATA[<p>很高兴用上了hexo来搭建博客！</p>
<p>因为最近使用学习angular、vue、cordova等框架和技术，慢慢喜欢上了用node来构建应用程序的过程。我原来的博客系统是Ghost,部署在亚马逊AWS上。最近AWS一年免费体验准备到期了，博客也要找个别的地方安放。</p>
<p>早就知道了github上能搭建博客，但是之前是觉得构建起来很复杂，就没有尝试。这次，我就要尝试一下了！就是你现在看到的模样！</p>
<p>这篇文章要记下来整个迁移过程。从hexo的安装、构建、部署、安装主题、从Ghost迁移文章。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很高兴用上了hexo来搭建博客！&lt;/p&gt;
&lt;p&gt;因为最近使用学习angular、vue、cordova等框架和技术，慢慢喜欢上了用node来构建应用程序的过程。我原来的博客系统是Ghost,部署在亚马逊AWS上。最近AWS一年免费体验准备到期了，博客也要找个别的地方安放。&lt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://elderjames.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio 2017 正式版安装问题及解决方案记录</title>
    <link href="https://elderjames.github.io/2017/03/14/visual-studio-2017-zheng-shi-ban-an-zhuang-wen-ti-ji-jie-jue-fang-an-ji-lu.html"/>
    <id>https://elderjames.github.io/2017/03/14/visual-studio-2017-zheng-shi-ban-an-zhuang-wen-ti-ji-jie-jue-fang-an-ji-lu.html</id>
    <published>2017-03-14T02:05:42.000Z</published>
    <updated>2017-03-14T05:48:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>##Visual Studio 2017正式版终于出来啦！</p>
<p>下载地址：<a href="https://www.visualstudio.com/zh-hans/" target="_blank" rel="external">请到主页</a></p>
<p>推荐使用安装器下载，速度比以前快了很多！必装的Web和.NET Core组件只需要15分钟就可以安装完（当然，视网速而定，15分钟是用100M/bs的宽带下载的，下载峰值在5M/s左右）</p>
<p>以下是记录了一些安装中遇到的问题，会不定时更新。</p>
<h4 id="Win7-无法安装Cordova"><a href="#Win7-无法安装Cordova" class="headerlink" title="Win7 无法安装Cordova"></a>Win7 无法安装Cordova</h4><p>因为Cordova组件需要PowerShell 6.0，而Win7是不自带的（Win8-Win10自带）,所以先下载PowerShell 6.0吧！</p>
<p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=34595" target="_blank" rel="external">PowerShell 6.0下载地址</a></p>
<h4 id="Cordova-无法编译成Android"><a href="#Cordova-无法编译成Android" class="headerlink" title="Cordova 无法编译成Android"></a>Cordova 无法编译成Android</h4><p>可能是Gradle压缩包损坏导致，重新下载压缩包放到目录C:\Users\Administrator.gradle\wrapper\dists[gradle-2.13-all]下<br><a href="https://services.gradle.org/distributions/" target="_blank" rel="external">单独下载Gradle</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Visual Studio 2017正式版终于出来啦！&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://www.visualstudio.com/zh-hans/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;请到主页&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NPM 国内镜像</title>
    <link href="https://elderjames.github.io/2016/09/22/n.html"/>
    <id>https://elderjames.github.io/2016/09/22/n.html</id>
    <published>2016-09-22T07:18:28.000Z</published>
    <updated>2016-09-28T15:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>npm由于很多时候都需要从国外的服务器下载组件，由于<strong>众所周知</strong>的原因，国内安装时往往会很慢甚至卡住安装不上的情况，这时就需要替换一下安装源，使用国内服务商提供的镜像：</p>
<ul>
<li><a href="http://npm.hacknodejs.com/" target="_blank" rel="external">http://npm.hacknodejs.com/</a></li>
<li><a href="http://registry.npmjs.vitecho.com/" target="_blank" rel="external">http://registry.npmjs.vitecho.com/</a></li>
<li><a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></li>
</ul>
<p>####使用方法<br>永久使用镜像命令： </p>
<p><code>npm config set registry https://registry.npm.taobao.org</code></p>
<p>临时使用镜像命令：</p>
<p><code>npm --registry &quot;http://npm.hacknodejs.com/&quot; install underscore</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;npm由于很多时候都需要从国外的服务器下载组件，由于&lt;strong&gt;众所周知&lt;/strong&gt;的原因，国内安装时往往会很慢甚至卡住安装不上的情况，这时就需要替换一下安装源，使用国内服务商提供的镜像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://npm.hack
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ASP.NET Core中使用依赖注入获得请求生命周期内唯一的DbContext</title>
    <link href="https://elderjames.github.io/2016/09/22/asp-net-corezhong-shi-yong-qing-qiu-sheng-ming-zhou-qi-nei-wei-yi-de-dbcontext.html"/>
    <id>https://elderjames.github.io/2016/09/22/asp-net-corezhong-shi-yong-qing-qiu-sheng-ming-zhou-qi-nei-wei-yi-de-dbcontext.html</id>
    <published>2016-09-22T05:58:52.000Z</published>
    <updated>2016-09-22T06:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>很高兴，我的博客又回来了。</p>
<p>在使用.NET Core来开发项目已经有两个多月了，想在这里记录一些在.NET Core中比较方便的知识。</p>
<p>这里讲一讲在ASP.NET Core中使用依赖注入的方式请求生命周期内唯一的DbContext。<br>按照以往.NET Framework中的Web应用程序使用EF，我们会把DbContext实例放入CallContext中，这是在一个线程周期中可共享的存储对象，来达到获得线程内唯一的DbContext等其它对象。但是在.NET Core时代，已经不需要CallContext了，而是使用最突出的特点——依赖注入。</p>
<p>首先，我们在Startup.cs中配置好EF Core:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">services.AddDbContext&lt;YourContext&gt;(option =&gt;</div><div class="line">     option.UseMySql(Configuration.GetConnectionString(&quot;YunGoConllection&quot;))</div><div class="line">);</div></pre></td></tr></table></figure>
<p>然后，在需要的类中以构造方法注入的方式注入YourContext即可。注意：不管是在MVC项目中还是被应用的类库中，都可以使用注入方法！这就是.NET Core的强大~</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class TestController : Controller</div><div class="line">  &#123;</div><div class="line">      YourContext _db;</div><div class="line"></div><div class="line">      public TestController(YourContext db)</div><div class="line">      &#123;</div><div class="line">          _db=db;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      public async Task&lt;IActionResult&gt; Test()</div><div class="line">      &#123;</div><div class="line">          var _users=await _db.Users.ToListAsync();</div><div class="line">          return Ok(_users);</div><div class="line">      &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>其实在services.AddDbContext()内部，是已经用services.AddScoped()方法注册了YourContext，用这种方式注册后可以在一次请求生命周期内获得同一个实例，所以，我们可以把所有的注入都使用这种方式，节省因为每次都new对象（等同于注册方法services.AddTransient()）而带来的内存占用~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很高兴，我的博客又回来了。&lt;/p&gt;
&lt;p&gt;在使用.NET Core来开发项目已经有两个多月了，想在这里记录一些在.NET Core中比较方便的知识。&lt;/p&gt;
&lt;p&gt;这里讲一讲在ASP.NET Core中使用依赖注入的方式请求生命周期内唯一的DbContext。&lt;br&gt;按照以
    
    </summary>
    
    
      <category term="
- .NET
- .NET Core" scheme="https://elderjames.github.io/tags/NET-NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>EF Core For Mysql 的DataBase First（基于已有数据库）方式连接数据库</title>
    <link href="https://elderjames.github.io/2016/07/30/ef-core-for-mysql-de-databasefang-shi-lian-jie-shu-ju-ku.html"/>
    <id>https://elderjames.github.io/2016/07/30/ef-core-for-mysql-de-databasefang-shi-lian-jie-shu-ju-ku.html</id>
    <published>2016-07-30T03:30:16.000Z</published>
    <updated>2016-07-30T04:25:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>.NET要跨平台，就一定要使用同样可以跨平台的数据库，而轻量的MySQL自然是首选。.NET Core发展到现在，虽然官方的Entity Framework还没发布MySQL版本，但是刚认识的柚子大神已经首先把它做出来了（<a href="http://www.1234.sh/post/pomelo-data-mysql" target="_blank" rel="external">他的博客</a>）。</p>
<p>同时，他也开源了它使用MySql for Entity Framework Core写的轻量博客系统，可惜在数据库连接是使用Code First。Code First当时是好，也是微软官方推荐的数据操作方式，可是，对于已有数据库的项目，希望创建基于已有数据库的.NET Core应用，或者对已有项目进行移植的开发者，就显得力不从心了。</p>
<p>虽然官方有从数据库创建模型的方法（<a href="https://docs.efproject.net/en/latest/platforms/aspnetcore/existing-db.html" target="_blank" rel="external">地址</a>），但是它使用了下面这三个只适用于SqlServer的工具包：</p>
<ul>
<li>Microsoft.EntityFrameworkCore.SqlServer</li>
<li>Microsoft.EntityFrameworkCore.Tools</li>
<li>Microsoft.EntityFrameworkCore.SqlServer.Design</li>
</ul>
<p>目前MySQL方面还没有这些工具包，就自然不能执行从数据库创建模型的命令（如下）了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Scaffold-DbContext <span class="string">"Server=(localdb)\mssqllocaldb;Database=Blogging;Trusted_Connection=True;"</span> Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models</div></pre></td></tr></table></figure>
<p>因此，我们目前只能手动创建模型，并且在DbContext中将模型与数据库中相应的表绑定起来，具体方法就是在DbContext中重写OnModelCreating方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">protected override void OnModelCreating(ModelBuilder builder)</div><div class="line">&#123;</div><div class="line">    builder.Entity&lt;SliderPicture&gt;(e =&gt;</div><div class="line">    &#123;</div><div class="line">        e.HasKey(x =&gt; x.Id);</div><div class="line">        e.ToTable(&quot;yg_slider&quot;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    builder.Entity&lt;ClientVersion&gt;(e =&gt;</div><div class="line">    &#123;</div><div class="line">        e.HasKey(x =&gt; x.Id);</div><div class="line">        e.ToTable(&quot;yg_version&quot;)</div><div class="line">        .HasIndex(x =&gt; x.CreateTime);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>希望.NET Core能尽快完善并增加更强大的特性，我想这也是所以.NETer的希望。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;.NET要跨平台，就一定要使用同样可以跨平台的数据库，而轻量的MySQL自然是首选。.NET Core发展到现在，虽然官方的Entity Framework还没发布MySQL版本，但是刚认识的柚子大神已经首先把它做出来了（&lt;a href=&quot;http://www.1234.s
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>.NET Core以依赖注入的方式配置MySql的DbContext</title>
    <link href="https://elderjames.github.io/2016/07/30/yi-zhu-ru-de-fang-shi.html"/>
    <id>https://elderjames.github.io/2016/07/30/yi-zhu-ru-de-fang-shi.html</id>
    <published>2016-07-30T03:04:28.000Z</published>
    <updated>2016-07-31T03:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用ASP.NET Core开发Web项目，在很多方面都跟之前的.NET版本有很大不同，在Startup.cs的配置方面,一言不合就使用依赖注入。当然，这对于整个项目的解耦是极好的。这次踩的坑在DbContext的配置上。</p>
<p>在<a href="http://www.1234.sh/post/pomelo-data-mysql" target="_blank" rel="external">柚子大神的博客</a>中,有介绍他移植过来的mysql for ef core的使用方法是在Startup中注册服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">services.AddDbContext&lt;YourContext&gt;(x =&gt; x.UseMySql(&quot;server=localhost;database=yourdb;uid=root;pwd=yourpwd&quot;));</div></pre></td></tr></table></figure></p>
<p>但是，这样配置之后，又需要在YourContext中配置：<br><img src="/content/images/2016/07/0e1ef77c-b03e-439f-a894-cb1de1811695.png" alt=""></p>
<p>这样的话，其实是等于配置了两次，在DbContext中是直接写ConnectionString的，不能（我还不会）从配置文件中读取。因此，需要寻找一个从Startup中配置的有效方法。</p>
<p>通过对比MVC6项目模版的sqlserver配置方式，和<a href="https://docs.efproject.net/en/latest/miscellaneous/configuring-dbcontext.html" target="_blank" rel="external">官方文档的介绍</a>，发现DbContext里是可以通过注入的方式注册ConnectionString的，方法就是设置构造函数注入DbContextOptions：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public YourContext(DbContextOptions&lt;YourContext&gt; options)</div><div class="line">          : base(options)</div><div class="line">      &#123; &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用ASP.NET Core开发Web项目，在很多方面都跟之前的.NET版本有很大不同，在Startup.cs的配置方面,一言不合就使用依赖注入。当然，这对于整个项目的解耦是极好的。这次踩的坑在DbContext的配置上。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;http://w
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用SecureCRT连接免费的亚马逊云服务器</title>
    <link href="https://elderjames.github.io/2016/07/19/shi-yong-securecrtlian-jie-ya-ma-xun-yun-fu-wu-qi.html"/>
    <id>https://elderjames.github.io/2016/07/19/shi-yong-securecrtlian-jie-ya-ma-xun-yun-fu-wu-qi.html</id>
    <published>2016-07-19T14:09:21.000Z</published>
    <updated>2016-07-19T17:07:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>亚马逊AWS有一年的免费体验，相比国内的阿里云、腾讯云的优惠政策更实在，而且又不用认证、也不用备案，一个邮箱帐号就能获得，简直就是我等学生（虽然已经不是了，但刚出来工作没几个钱呀！）的福利！</p>
<p>在亚马逊中，选择“新加坡”、“首尔”、“东京”这几个位于亚洲的节点响应速度都算是比较快的，虽然比不上国内，但是结合七牛等CDN云服务一样可以做到不错的响应速度。</p>
<p>而本篇的主题，就是因AWS的特殊连接方式而产生的，虽然网上已经有很多前辈给了教程，但是始终不如自己写一下，等以后可以方便地查到更方便。</p>
<h6 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h6><ol>
<li>创建AWS实例的时候，会得到一个.pem后缀的密钥文件，我们需要通过这个文件去连接服务器。</li>
<li>打开SecureCRT，点击菜单栏“工具”–&gt;“转换密钥为OpenSHH格式”,然后在弹出的文件选择框中选择pem文件，然后在接下来的文件选项框中选择保存转换后密钥对文件的保存路径，这样密钥就保存完了。</li>
<li>点击“快速连接”按钮，在弹出的“快速连接”窗口中，输入“服务器ip地址”，不输入用户名，在“鉴权”一栏，把“公钥”移动到第一位，即“密码”上面。</li>
<li>选择“公钥”，然后点击“属性”，再选择“使用会话公钥设置”，在会话设置中选择“使用身份或证书文件”，并点击“…”按钮选择第2步生成的.pub文件。</li>
<li>最后点击“确定”，并在“快速连接”窗口中点击“连接”，然后在弹出的提示框中点击“是”，此时就已经可以成功连接到服务器了。</li>
</ol>
<h6 id="改为使用密码登录"><a href="#改为使用密码登录" class="headerlink" title="改为使用密码登录"></a>改为使用密码登录</h6><p>使用密钥文件连接，虽然是大大加强安全性了，但是对于个人服务器来说就很不方便了，所以，这里把前辈们给出的方法搬过来。</p>
<ol>
<li><p>修改ROOT密码<br><code>sudo passwd root</code></p>
</li>
<li><p>修改sshd_config文件的限权，用完再把权限改回来<br><code>sudo chmod 777 /etc/ssh/sshd_config</code></p>
</li>
<li><p>使用vi编辑<code>vi /etc/ssh/sshd_config</code> </p>
<ul>
<li><code>PermitRootLogin</code> 改为 PermitRootLogin yes</li>
<li><code>PasswordAuthentication no</code>  no 改为 yes</li>
<li><code>UsePAM yes</code> yes改为no （CentOS此步不需做）</li>
</ul>
</li>
<li><p>执行<code>/etc/init.d/sshd restart</code>或到AWS控制台重启服务器。</p>
</li>
</ol>
<p>这样就搞定啦！！</p>
<h6 id="使用WinSCP连接"><a href="#使用WinSCP连接" class="headerlink" title="使用WinSCP连接"></a>使用WinSCP连接</h6><p>对于不习惯命令行的我，文件操作还是使用GUI比较方便，在这方面，WinSCP有绝对的口碑，而使用密钥文件来连接的话，还是要多一些步骤。</p>
<ol>
<li>新建站点，点击高级按钮，在弹出的“高级站点设置”窗口中，选择“验证”设置项，在“验证参数”选项中点击“…”按钮，选择.pem文件，此时会有将.pem文件转换为PuTTY格式的密钥文件的提示，点击“确定”就好了。</li>
<li>在弹出的“PuTTY Key Generator”窗口中，如果希望使用密钥文件登录时还需要密码才能登录，可以在“KeyPassphrase”输入框中输入密码和确认密码，然后点击“Save Private Key”按钮，在不填密码时会弹出提示，如果确定不用密码就可以直接点击“是”，这时会保存一个.ppk文件到选定的目录。</li>
<li>然后回到“高级站点设置”窗口，重复第一步，不过此时选择的是刚刚生成的.ppk文件，点击“确定”按钮回到登录界面。</li>
<li>登录界面输入主机名，最后点击“登录”按钮即可成功登录。</li>
</ol>
<p>好啦，关于亚马逊AWS的使用就写到这吧~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;亚马逊AWS有一年的免费体验，相比国内的阿里云、腾讯云的优惠政策更实在，而且又不用认证、也不用备案，一个邮箱帐号就能获得，简直就是我等学生（虽然已经不是了，但刚出来工作没几个钱呀！）的福利！&lt;/p&gt;
&lt;p&gt;在亚马逊中，选择“新加坡”、“首尔”、“东京”这几个位于亚洲的节点响
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>.NET Core 资料整理</title>
    <link href="https://elderjames.github.io/2016/07/12/net-core-zi-liao-zheng-li.html"/>
    <id>https://elderjames.github.io/2016/07/12/net-core-zi-liao-zheng-li.html</id>
    <published>2016-07-12T05:09:47.000Z</published>
    <updated>2016-07-15T07:21:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>##工具下载</p>
<ul>
<li><p><a href="http://download.microsoft.com/download/c/2/6/c26892d8-6a5d-4871-9d46-629f4d430146/vs2015.3.vsu.iso" target="_blank" rel="external">Visual Studio 2015 Update3 升级包</a></p>
</li>
<li><p><a href="ed2k://|file|cn_visual_studio_professional_2015_with_update_3_x86_x64_dvd_8923256.iso|7745202176|DD35D3D169D553224BE5FB44E074ED5E|/" target="_blank" rel="external">Visual Studio Professional 2015 Update3</a></p>
</li>
<li><p><a href="http://download.microsoft.com/download/7/c/f/7cf151c3-b735-4e35-a1bb-9a48224f4a95/vs2015.3.ent_chs.iso" target="_blank" rel="external">Visual Studio Enterprise 2015 Update3</a> </p>
</li>
<li><p><a href="http://download.microsoft.com/download/5/d/1/5d1ec81e-bc59-448f-9ab6-27636d5cc18a/vs2015.3.com_chs.iso" target="_blank" rel="external">Visual Studio Community 2015 Update3</a></p>
</li>
<li><p><a href="http://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/DotNetCore.1.0.0-VS2015Tools.Preview2.exe" target="_blank" rel="external">.NET Core for VS Tools</a></p>
</li>
<li><p><a href="https://az764295.vo.msecnd.net/stable/e724f269ded347b49fcf1657fc576399354e6703/VSCodeSetup-stable.exe" target="_blank" rel="external">Visual Studio Code</a></p>
</li>
<li><p><a href="https://download.microsoft.com/download/A/3/8/A38489F3-9777-41DD-83F8-2CBDFAB2520C/packages/DotNetCore.1.0.0-SDK.Preview2-x64.exe" target="_blank" rel="external">.NET Core SDK</a></p>
</li>
</ul>
<p>##文档</p>
<ul>
<li><a href="http://www.cnblogs.com/dotNETCoreSG/p/aspnetcore-index.html" target="_blank" rel="external">ASP.NET Core 中文文档</a></li>
</ul>
<p>##部署</p>
<ul>
<li><a href="http://www.cnblogs.com/yunei/p/5662642.html" target="_blank" rel="external">Jexus 5.8.2 Beta1发布：为Asp.Net Core进入生产环境提供平台支持</a></li>
<li><a href="http://www.cnblogs.com/gaobing/p/5663012.html" target="_blank" rel="external">ASP.NET Core “完整发布,自带运行时” 到jexus</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##工具下载&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://download.microsoft.com/download/c/2/6/c26892d8-6a5d-4871-9d46-629f4d430146/vs2015.3.vsu.iso&quot; targe
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记在Mono 4.2 上EF使用Select操作时会发生的错误</title>
    <link href="https://elderjames.github.io/2016/07/12/yun-xing-zai-monoshang-de-efyun-xing-cuo-wu.html"/>
    <id>https://elderjames.github.io/2016/07/12/yun-xing-zai-monoshang-de-efyun-xing-cuo-wu.html</id>
    <published>2016-07-12T02:38:39.000Z</published>
    <updated>2016-07-20T10:18:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>错误提示：The classes in the module cannot be loaded.</p>
<p>代码还原：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> var data = await db.Set&lt;FormulaCarType&gt;()</div><div class="line">.Where(c =&gt; c.Status == (int)CommonStatus.启用)</div><div class="line">.Select(c =&gt; new FormulaCarModel</div><div class="line">            &#123;</div><div class="line">                Id = c.Id,</div><div class="line">                Type = c.CardType,</div><div class="line">                Seats = c.Seats,</div><div class="line">                FuelConsumption = c.FuelConsumption,</div><div class="line">                MaintainFee = c.MaintainFee,</div><div class="line">                CreateTime = c.CreateTime,</div><div class="line">                Status = (CommonStatus)c.Status</div><div class="line">            &#125;).ToListAsync();</div></pre></td></tr></table></figure>
<p>在查询中，在查询方法（ToListAsync）执行前进行了select的操作，则在执行的时候就会出错（在Windows上运行时不会发生），因此，需要在select前执行查询，再对查询结果进行select的操作。如下则不会出错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var result = await db.Set&lt;FormulaCarType&gt;()</div><div class="line">.Where(c =&gt; c.Status == (int)CommonStatus.启用).ToListAsync();</div><div class="line"> var data = result.Select(c =&gt; new FormulaCarModel</div><div class="line">            &#123;</div><div class="line">                Id = c.Id,</div><div class="line">                Type = c.CardType,</div><div class="line">                Seats = c.Seats,</div><div class="line">                FuelConsumption = c.FuelConsumption,</div><div class="line">                MaintainFee = c.MaintainFee,</div><div class="line">                CreateTime = c.CreateTime,</div><div class="line">                Status = (CommonStatus)c.Status</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;错误提示：The classes in the module cannot be loaded.&lt;/p&gt;
&lt;p&gt;代码还原：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div
    
    </summary>
    
    
      <category term="
- mono
- .NET
- EF" scheme="https://elderjames.github.io/tags/mono-NET-EF/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core使用Session方法</title>
    <link href="https://elderjames.github.io/2016/07/08/as.html"/>
    <id>https://elderjames.github.io/2016/07/08/as.html</id>
    <published>2016-07-08T06:18:16.000Z</published>
    <updated>2016-07-08T06:23:41.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>在project.json配置文件中引入程序集：<code>&quot;Microsoft.AspNetCore.Session&quot;: &quot;1.0.0&quot;</code></p>
</li>
<li><p>在Startup.cs的ConfigureService方法中加入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">services.AddSession(options =&gt; &#123;</div><div class="line">    options.IdleTimeout = TimeSpan.FromMinutes(30);</div><div class="line"> &#125; );</div></pre></td></tr></table></figure>
</li>
<li><p>在Configure方法中加： <code>app.UseSession();</code></p>
</li>
</ul>
<p>于是，Session就可以用啦！</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;在project.json配置文件中引入程序集：&lt;code&gt;&amp;quot;Microsoft.AspNetCore.Session&amp;quot;: &amp;quot;1.0.0&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Startup.cs的Co
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从旧版.NET Core 升级到.NET Core 1.0正式版</title>
    <link href="https://elderjames.github.io/2016/06/30/cong-jiu-ban-net-core-sheng-ji-dao-net-core-1-0zheng-shi-ban.html"/>
    <id>https://elderjames.github.io/2016/06/30/cong-jiu-ban-net-core-sheng-ji-dao-net-core-1-0zheng-shi-ban.html</id>
    <published>2016-06-30T06:00:33.000Z</published>
    <updated>2016-06-30T07:11:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>6月28日凌晨，RedHat 开发者大会上微软正式发布.NET Core正式版，我作为.NET爱好者，马上就想安装来玩玩，不过因为之前电脑上就装有旧版本，在这次正式版的安装中遇到了一些坑，装了n遍，死活装不上，停留在旧版本。</p>
<p>下载地址：</p>
<ol>
<li><a href="https://go.microsoft.com/fwlink/?LinkId=817245" target="_blank" rel="external">.NET Core for Visual Studio official MSI Installer</a><br>(需要先安装<a href="https://www.visualstudio.com/downloads/download-visual-studio-vs" target="_blank" rel="external">Visual Studio 2015 Update 3</a>)</li>
<li><a href="https://go.microsoft.com/fwlink/?LinkID=809122" target="_blank" rel="external">.NET Core SDK for Windows</a></li>
</ol>
<p>然后，如果你电脑之前没安装过.NET Core,有装了Visual Studio 2015 的话，需要把VS升级到Update3，再安装.NET Core for Visual Studio official MSI Installer（里面已经包含.NET Core SDK）； 如果没装VS，也不打算使用VS的话，可以只安装.NET Core SDK。</p>
<p>但是，如果以前安装过旧版的.NET Core，就需要先在【控制面板\所有控制面板项\程序和功能】中卸载以前的版本，并且==需要删除所有的环境变量==，在【控制面板\所有控制面板项\系统】中的左侧边栏中点击【高级系统设计】，在弹出的窗口中点击下方的环境变量按钮，在弹出的【环境变量】窗口中的【系统变量】一栏中找到“Path”变量，删除所有指向dotnet、dnx、dnu、dnvm目录的值，然后按“确定”保存退出。</p>
<p>这样，安装程序才能重新安装新版的.NET Core SDK。在命令提示符窗口中输入<code>dotnet</code>命令即可查看到当前版本是否为正式版1.0.1。</p>
<p>谢谢大家！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;6月28日凌晨，RedHat 开发者大会上微软正式发布.NET Core正式版，我作为.NET爱好者，马上就想安装来玩玩，不过因为之前电脑上就装有旧版本，在这次正式版的安装中遇到了一些坑，装了n遍，死活装不上，停留在旧版本。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;/p&gt;
&lt;ol&gt;
&lt;l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git 操作笔记</title>
    <link href="https://elderjames.github.io/2016/03/28/git-cao-zuo-bi-ji.html"/>
    <id>https://elderjames.github.io/2016/03/28/git-cao-zuo-bi-ji.html</id>
    <published>2016-03-28T06:17:16.000Z</published>
    <updated>2016-03-28T15:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>$ cd myproject</code>  你建立的项目文件夹</p>
<p><code>$ git init</code>   执行git的本地初始化</p>
<p><code>$ git add .</code>  将所有的文件添加到版本控制系统</p>
<p><code>$ git commit -m &quot;initial commit&quot;</code>  在本地提交到版本库</p>
<p><code>$ git remote add origin git@116.255.160.144://srv/gitserver/jewels.git</code> 添加远程仓库(jewels是服务器端项目管理到名字，与本地项目名字无关)</p>
<p><code>$ git push origin master</code> 将本地版本库推送到远程仓库</p>
<p><code>git checkout master</code> //进入master分支</p>
<p><code>git checkout -b frommaster</code> //以master为源创建分支frommaster</p>
<p>// 把本地仓库提交到远程仓库的master分支中</p>
<p><code>git push ssh://git@dev.lemote.com/rt4ls.git master</code> </p>
<p>或使用标记</p>
<p><code>$ git remote add origin ssh://git@dev.lemote.com/rt4ls.git</code></p>
<p><code>$ git push origin master</code></p>
<p><code>$ git push origin test:master</code>         // 提交本地test分支作为远程的master分支</p>
<p><code>$ git push origin test:test</code>             // 提交本地test分支作为远程的test分支</p>
<p><code>$ git push origin :test</code>              // 刚提交到远程的test将被删除，但是本地还会保存的，不用担心</p>
<p>文章来源：<a href="http://www.cnblogs.com/wangkangluo1/archive/2011/09/02/2164313.html" target="_blank" rel="external">git 远程分支创建与推送</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;$ cd myproject&lt;/code&gt;  你建立的项目文件夹&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git init&lt;/code&gt;   执行git的本地初始化&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git add .&lt;/code&gt;  将所有的文件添加到版本控制系统&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 搭建Gogs ：轻量Git Web端管理系统</title>
    <link href="https://elderjames.github.io/2016/03/26/ubuntu-da-jian-gogs-qing-liang-git-webduan-guan-li-xi-tong.html"/>
    <id>https://elderjames.github.io/2016/03/26/ubuntu-da-jian-gogs-qing-liang-git-webduan-guan-li-xi-tong.html</id>
    <published>2016-03-26T14:36:31.000Z</published>
    <updated>2016-03-28T10:13:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>Gogs是国人开发的开源git管理系统，类似gitlab，可在服务器上搭建私人的git版本管理系统。内建很多功能，但俾比gitlab安装更方便，占用更少的资源。<br>详细介绍还是看看官方网站吧：<a href="https://gogs.io" target="_blank" rel="external">https://gogs.io</a></p>
<p>现在结合本人的安装过程，在这里做一个记录。适合小白参考。</p>
<p>安装方法有三种：二进制安装，源码安装，包管理安装，我认为最方便的还是二进制安装。</p>
<p>首先下载<a href="https://gogs.io/docs/installation/install_from_binary" target="_blank" rel="external">二进制包</a>，在这个页面上也有安装教程。</p>
<p>然后在解压后进入目录，执行 ./gogs web ，则能够启动服务进程，但这时的服务是临时的，一退出就会关闭，所以需要持续化进程配置。</p>
<p>因为gogs的安装设置页面里的设置只能设置一次，以后要修改则要新建一个文件，所以这里最好先做好准备工作。</p>
<ul>
<li>反向代理 代理ip为 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a></li>
<li>持续进程 使用supervisor</li>
</ul>
<p><code>sudo apt-get -y install supervisor</code></p>
<p><code>sudo mkdir -p /var/log/gogs</code></p>
<p><code>sudo nano /etc/supervisor/supervisord.conf</code></p>
<p>在这个文件最下面添加应用信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[program:gogs]</div><div class="line">directory=/home/gogs/</div><div class="line">command=/home/gogs/gogs web</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">startsecs=10</div><div class="line">stdout_logfile=/var/log/gogs/stdout.log</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=10</div><div class="line">stdout_capture_maxbytes=1MB</div><div class="line">stderr_logfile=/var/log/gogs/stderr.log</div><div class="line">stderr_logfile_maxbytes=1MB</div><div class="line">stderr_logfile_backups=10</div><div class="line">stderr_capture_maxbytes=1MB</div><div class="line">environment = HOME=&quot;/home/git&quot;, USER=&quot;git&quot;</div><div class="line">user = git</div></pre></td></tr></table></figure></p>
<p>其中directory和command中的路径是gogs目录的路径</p>
<p>最后执行重启服务<br><code>sudo service supervisor restart</code></p>
<p>提示Starting supervisor: supervisord.</p>
<p>然后执行<code>ps -ef | grep gogs</code>查看服务是否已经启动</p>
<p>如果有如下类似信息则表示服务启动成功：</p>
<p>root      1344  1343  0 08:55 ?        00:00:00 /home/gogs/gogs web</p>
<p>这个时候，可以在浏览器上访问<code>http://your_server_ip:3000/</code>或者在反向代理中设置好的地址，自动跳转到/install设置页面。其中要注意的是网址设置，如果已经使用反向代理，则添加设置的地址，应用域名不需要http:// ，而后面的应用url则需要http:// ，否则路由会出错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gogs是国人开发的开源git管理系统，类似gitlab，可在服务器上搭建私人的git版本管理系统。内建很多功能，但俾比gitlab安装更方便，占用更少的资源。&lt;br&gt;详细介绍还是看看官方网站吧：&lt;a href=&quot;https://gogs.io&quot; target=&quot;_blan
    
    </summary>
    
    
      <category term="
- git
- gogs" scheme="https://elderjames.github.io/tags/git-gogs/"/>
    
  </entry>
  
  <entry>
    <title>修复apt-get包管理</title>
    <link href="https://elderjames.github.io/2016/03/24/xiu-fu-apt-getbao-guan-li.html"/>
    <id>https://elderjames.github.io/2016/03/24/xiu-fu-apt-getbao-guan-li.html</id>
    <published>2016-03-24T03:31:49.000Z</published>
    <updated>2016-03-24T03:35:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.通过<code>wget http://oss.aliyuncs.com/aliyunecs/update_source.tgz</code> 下载update_source的压缩包。</p>
<p>2.<code>tar xvf update_source.tgz</code>解压后予执行权限<code>chmod 777 update_source.sh</code>。</p>
<p>3.执行该脚本<code>./update_source.sh</code>进行自动变更源操作。</p>
<p><img src="https://img.alicdn.com/tps/TB1tGPGJFXXXXbwXVXXXXXXXXXX-878-324.jpg" alt=""><br><img src="https://img.alicdn.com/tps/TB1Fsr1JFXXXXcFXpXXXXXXXXXX-810-184.jpg" alt=""></p>
<p>更新成功会提示”Success, exit now!“</p>
<p>如问题还未解决,请联系售后技术支持。</p>
<p>来源：<a href="http://www.iisiis.com/web/vps/1884.html" target="_blank" rel="external">http://www.iisiis.com/web/vps/1884.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.通过&lt;code&gt;wget http://oss.aliyuncs.com/aliyunecs/update_source.tgz&lt;/code&gt; 下载update_source的压缩包。&lt;/p&gt;
&lt;p&gt;2.&lt;code&gt;tar xvf update_source.tgz&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C#利用反射机制动态创建泛型接口实例</title>
    <link href="https://elderjames.github.io/2016/03/21/dong-tai-chuang-jian-fan-xing-jie-kou-shi-li.html"/>
    <id>https://elderjames.github.io/2016/03/21/dong-tai-chuang-jian-fan-xing-jie-kou-shi-li.html</id>
    <published>2016-03-21T11:19:10.000Z</published>
    <updated>2016-07-12T05:40:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>我很懒，不希望写重复的copy代码，所以希望在写代码时能尽量简化和重用，一些设计上有但没必要的能不写就不写，但当然必须要实现。</p>
<p>最近学会用C#的反射机制，觉得非常好，可以通过类名实例化一个对应的对象。于是我就想到了在设计业务层时，一些通用的数据库操作是以泛型基类的形式供给各个模型使用的，只需替换传入的模型的类型参数，即刻操作相应的模型，而对于一些模型需要的特殊操作，则以这个基类派生出包含特殊方法的子类来实现。</p>
<p>但是这里会出现一些问题，就是在各层透明的情况下，其他层是不知道模型是否包含有特殊的方法，最初的解决方法是为每个模型都写一个继承业务基类的子类，就算它里面是空的（没有特殊方法）。而现在，通过反射，我们可以很好地实现统一的业务实例化操作，实现自动判断该模型是否拥有对应的业务子类。</p>
<p>先设计一个泛型接口<code>IService&lt;T&gt;</code>,声明两个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">namespace Service</div><div class="line">&#123;</div><div class="line">   public Interface IService&lt;T&gt; where T : class</div><div class="line">   &#123;</div><div class="line"></div><div class="line">      IRepository&lt;T&gt; _repo &#123; get; &#125;</div><div class="line">      void SetRespository(IRepository&lt;T&gt; repo);</div><div class="line">      T Add(T entity);</div><div class="line">      bool Update(T entity);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后再写一个基础类，继承这个接口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">namespace Service</div><div class="line">&#123;</div><div class="line">      public class BaseService&lt;T&gt; : IService&lt;T&gt; where T : class</div><div class="line">    &#123;</div><div class="line">        IRepository&lt;T&gt; _repo ;</div><div class="line">        public void SetRespository(IRepository&lt;T&gt; repo)</div><div class="line">        &#123;</div><div class="line">            _repo=repo;</div><div class="line">        &#125;</div><div class="line">        public T Add(T entity)&#123;&#125;</div><div class="line">        public bool Update(T entity)&#123;&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设计业务工厂类，提供统一的实例化出口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">/// &lt;summary&gt;</div><div class="line">/// 业务工厂类</div><div class="line">/// &lt;para&gt;所有业务类都必须从这里产生&lt;/para&gt;</div><div class="line">/// &lt;/summary&gt;</div><div class="line">public class ServiceFactory</div><div class="line">&#123;</div><div class="line">    //获取当前程序集中的所有类的类型</div><div class="line">    static Type[] ts = Assembly.GetExecutingAssembly().GetTypes();</div><div class="line"></div><div class="line">    /// &lt;summary&gt;</div><div class="line">    /// 动态映射创建实现了IService&lt;T&gt;接口的实例</div><div class="line">    /// &lt;para&gt;如果字符集中已有继承了BaseService&lt;T&gt;的类，则返回该类的实例,</div><div class="line">    /// 否则返回BaseService&lt;T&gt; 的实例&lt;/para&gt;</div><div class="line">    /// &lt;/summary&gt;</div><div class="line">    /// &lt;typeparam name=&quot;T&quot;&gt;数据模型&lt;/typeparam&gt;</div><div class="line">    /// &lt;param name=&quot;repo&quot;&gt;仓储实例&lt;/param&gt;</div><div class="line">    /// &lt;returns&gt;实现IService&lt;T&gt;接口的实例对象&lt;/returns&gt;</div><div class="line">    public static IService&lt;T&gt; GetService&lt;T&gt;(IRepository repo) where T : class</div><div class="line">    &#123;</div><div class="line">        //获取传入类型的 System.Type 对象</div><div class="line">        Type TType = typeof(T);</div><div class="line">        //取当前线程内存块中可能已存储的Service对象</div><div class="line">        var _service = CallContext.GetData($&quot;BaseService&lt;&#123;TType.Name&#125;&gt;&quot;) as IService&lt;T&gt;;</div><div class="line"></div><div class="line">        if (_service != null) return _service;</div><div class="line">        //查询扩展业务类是否存在于程序集中</div><div class="line">        Type _class = ts.FirstOrDefault(o =&gt; o.Name.Equals(TType.Name + &quot;Service&quot;));</div><div class="line">        try</div><div class="line">        &#123;</div><div class="line">            if (_class != null)</div><div class="line">            &#123;</div><div class="line">                _service = Activator.CreateInstance(_class) as IService&lt;T&gt;;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                _service = Activator.CreateInstance(typeof(BaseService&lt;T&gt;)) as IService&lt;T&gt;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        catch (Exception ex)</div><div class="line">        &#123;</div><div class="line">            throw new Exception($&quot;无法实例化&#123;typeof(BaseService&lt;T&gt;).Name&#125;:&#123;ex.Message&#125;&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //获取泛型类定义的type类型</div><div class="line">        var _repoType = repo.GetType().GetGenericTypeDefinition();</div><div class="line">        //传入泛型类型参数</div><div class="line">        _repoType = _repoType.MakeGenericType(typeof(T));</div><div class="line">        //实例化仓储类</div><div class="line">        var _repo = Activator.CreateInstance(_repoType) as IRepository&lt;T&gt;;</div><div class="line">        //注入DbContext</div><div class="line">        _repo.SetDbContext(repo.db);</div><div class="line">        //注入仓储类</div><div class="line">        _service.SetRespository(_repo);</div><div class="line"></div><div class="line">        //将对象保存到当前线程的内存块中</div><div class="line">        CallContext.SetData($&quot;BaseService&lt;&#123;TType.Name&#125;&gt;&quot;, _service);</div><div class="line">        return _service;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我很懒，不希望写重复的copy代码，所以希望在写代码时能尽量简化和重用，一些设计上有但没必要的能不写就不写，但当然必须要实现。&lt;/p&gt;
&lt;p&gt;最近学会用C#的反射机制，觉得非常好，可以通过类名实例化一个对应的对象。于是我就想到了在设计业务层时，一些通用的数据库操作是以泛型基
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu安装mono 4.2.1 最新版教程</title>
    <link href="https://elderjames.github.io/2015/12/03/the-lastest-way-to-install-mono-4-2-1-on-ubuntu.html"/>
    <id>https://elderjames.github.io/2015/12/03/the-lastest-way-to-install-mono-4-2-1-on-ubuntu.html</id>
    <published>2015-12-03T04:00:04.000Z</published>
    <updated>2015-12-03T06:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在安装mono已经不用make命令来编译，可以直接执行<code>apt-get mono-complete</code>来安装最新的mono版本。</p>
<p>下面看看怎么安装：</p>
<ul>
<li>首先，在mono-project的安装指南页面获得最新的注册信息，<br><a href="http://www.mono-project.com/docs/getting-started/install/linux/#debian-ubuntu-and-derivatives" target="_blank" rel="external">这是地址</a>。</li>
</ul>
<p>然后按照上面的命令执行</p>
<p><code>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF</code></p>
<p><code>echo &quot;deb http://download.mono-project.com/repo/debian wheezy main&quot; | sudo tee /etc/apt/sources.list.d/mono-xamarin.list</code></p>
<p><code>sudo apt-get update</code></p>
<p>然后，再执行</p>
<p><code>sudo apt-get install mono-complete</code></p>
<p>OK,完成。不用再等久久的编译咯！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在安装mono已经不用make命令来编译，可以直接执行&lt;code&gt;apt-get mono-complete&lt;/code&gt;来安装最新的mono版本。&lt;/p&gt;
&lt;p&gt;下面看看怎么安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，在mono-project的安装指南页面获得最新的注册信
    
    </summary>
    
    
      <category term="
- mono
- 安装" scheme="https://elderjames.github.io/tags/mono-%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET 连接 Mysql 支持中文编码</title>
    <link href="https://elderjames.github.io/2015/11/06/make-mysql-support-chinese-encoding.html"/>
    <id>https://elderjames.github.io/2015/11/06/make-mysql-support-chinese-encoding.html</id>
    <published>2015-11-06T08:44:28.000Z</published>
    <updated>2015-11-08T04:56:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、关闭mysql服务<br><code>service mysql stop</code></p>
<p>2、修改 /etc/mysql/my.cnf  （默认的安装路径）<br><code>vim /etc/mysql/my.cnf</code></p>
<p>3、打开my.cnf后，在文件内的[mysqld]下增加如下两行设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">character-set-server=utf8</div><div class="line">collation-server=utf8_general_ci</div></pre></td></tr></table></figure></p>
<p><img src="http://" alt=""></p>
<p>保存并退出。</p>
<p>4、重新启动mysql服务<br><code>service mysql start</code></p>
<p>5、连接字符串加入<code>CharSet=utf8;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、关闭mysql服务&lt;br&gt;&lt;code&gt;service mysql stop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、修改 /etc/mysql/my.cnf  （默认的安装路径）&lt;br&gt;&lt;code&gt;vim /etc/mysql/my.cnf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、打开
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC 中UEditor 1.4.3 前台直接上传文件到七牛云存储</title>
    <link href="https://elderjames.github.io/2015/10/30/use-qiniu-upload-file-service-on-ueditor-for-asp-net-mvc.html"/>
    <id>https://elderjames.github.io/2015/10/30/use-qiniu-upload-file-service-on-ueditor-for-asp-net-mvc.html</id>
    <published>2015-10-30T04:52:35.000Z</published>
    <updated>2015-10-30T05:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个ASP.NET MVC 的项目，当然是离不开富文本编辑器，这里我选择的是百度的UEditor，虽然不够轻量，界面也不好看，但是功能还是挺多的。而因为项目主要面对移动端的用户，所以为了减轻低配服务器的压力，也为了用户体验更佳，决定在项目中接入七牛云存储。</p>
<p>选择七牛是看重他的CDN、上传加速和图片处理功能，最神奇的是在获取图片时只需在Url中加入几个参数即刻，而且还可以自己定图片的大小，大大减少了服务器在图片处理上的压力。</p>
<p>好吧，在这里就不继续安利了。</p>
<p>我第一次直接在项目中接入七牛，所以还是碰到了很多障碍。过程我就先不说了，我直接说怎么修改UEditor的相关代码吧。</p>
<p>###前台部分</p>
<ul>
<li><p>在配置文件config.json中，修改替换所有的<code>upfile</code> 为<code>file</code>，这里是因为七牛的上传接口要求文件上传控件（input）的name为file。</p>
</li>
<li><p>然后在最后加上几个配置项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/*七牛配置*/</div><div class="line">&quot;access_key&quot;: &quot;&quot;,</div><div class="line">&quot;secret_key&quot;: &quot;&quot;,</div><div class="line">&quot;bucket&quot;: &quot;mybucket&quot;,</div><div class="line">&quot;domain&quot;: &quot;http://xxx.com/&quot;,//七牛默认域名或者自定义域名</div><div class="line">&quot;uploadUrl&quot;:&quot;http://upload.qiniu.com/&quot;,//七牛上传文件的域名</div><div class="line">&quot;imageFieldName&quot;: &quot;file&quot;, /* 提交的图片表单名称 */</div><div class="line">&quot;tokenAction&quot;: &quot;/Admin/Attachment/Token&quot;,//获取上传凭证token的Action</div></pre></td></tr></table></figure>
</li>
<li><p>在路径 ueditor/dialogs/image/image.js 中找到<code>header[&#39;X_Requested_With&#39;] = &#39;XMLHttpRequest&#39;;</code> 在下面添加以下代码：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var filename = file.file.name;</div><div class="line">var token = &quot;&quot;;</div><div class="line">console.log(filename);</div><div class="line">$.ajax(&#123;</div><div class="line">     dataType: &apos;text&apos;,</div><div class="line">     async: false,</div><div class="line">     url: editor.getOpt(&apos;tokenAction&apos;) + &quot;?file=&quot; + filename+&quot;&amp;type=img&quot;,</div><div class="line">     success: function (data) &#123;</div><div class="line">         oken = data;</div><div class="line">     &#125;</div><div class="line"> &#125;);</div><div class="line"> data[&apos;token&apos;] = token;</div></pre></td></tr></table></figure>
<ul>
<li><p>在这段代码的上面，找到<code>uploader.option(&#39;server&#39;, url);</code><br>注释并修改为<code>uploader.option(&#39;server&#39;,editor.getOpt(&#39;uploadUrl&#39;));</code></p>
</li>
<li><p>在这段代码下面寻找<code>uploader.on(&#39;uploadSuccess&#39;, function (file, ret) {</code>，并在这个方法中的<code>if (json.state == &#39;SUCCESS&#39;) {</code>增加一行代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//在返回的地址加上七牛设置里的域名</div><div class="line">json.url = editor.getOpt(&apos;domain&apos;) + json.url;</div></pre></td></tr></table></figure>
</li>
<li><p>另外在attachment.js、video.js 的相同地方按上面所说的修改。</p>
</li>
</ul>
<p>###后台部分</p>
<ul>
<li><p>引入Qiniu SDK,添加一个获取token的服务:</p>
</li>
<li><p>添加获取token的Action（事先已经含有UEditor SDK的代码）：<br><img src="http://cdn.blog.yangshunjie.com/image/2/80/e2d2079f10dae2c8d51d0b96fe131.png" alt=" "></p>
</li>
<li><p>OssService.cs 中相关代码</p>
</li>
</ul>
<p><img src="http://cdn.blog.yangshunjie.com/image/d/b4/cbafea85536df7484629196a29cd6.png" alt=""><br><img src="http://cdn.blog.yangshunjie.com/image/4/18/4538ae76b6e196c09489c059a8651.png" alt=""></p>
<p>这样就基本可以实现将图片上传到七牛的空间了。而如果想在自己的服务器保留一份文件，可以在token中加如CallbackUrl 和 CallbackBody，使七牛在上传完成后对本地的服务器发出请求，把文件的参数发到本地服务器，这时本地服务器即刻按照返回的文件路径将文件抓取到本地服务器中。这部分我还没着手做，下次再继续写吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个ASP.NET MVC 的项目，当然是离不开富文本编辑器，这里我选择的是百度的UEditor，虽然不够轻量，界面也不好看，但是功能还是挺多的。而因为项目主要面对移动端的用户，所以为了减轻低配服务器的压力，也为了用户体验更佳，决定在项目中接入七牛云存储。&lt;/p&gt;

    
    </summary>
    
    
      <category term="
- 七牛" scheme="https://elderjames.github.io/tags/%E4%B8%83%E7%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>Ghost博客邮件SMTP服务配置</title>
    <link href="https://elderjames.github.io/2015/10/13/the-smtp-setting-for-ghost-blog.html"/>
    <id>https://elderjames.github.io/2015/10/13/the-smtp-setting-for-ghost-blog.html</id>
    <published>2015-10-13T08:57:04.000Z</published>
    <updated>2015-10-13T09:25:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>前天由于回到学校，用回了我的Pocker2机械键盘，在输入密码时连续不知道大小写切换键换了地方，连续输错了密码，帐号被封了……</p>
<p>Ghost也是的，连博客主人的号都能封，还不能（也可能是我不会）通过操作服务器（比如Wordpress能通过删除配置文件）来重置密码，只能通过发送邮件，好吧，之前就一直配置不成功，现在好了，只能硬着头皮给它设置好了。</p>
<p>看过几篇关于配置邮箱的文章，但还是不行，我就以为是我人品不好了。但是今天重新看了配置文件之后，终于发现了我错在哪，所以现在记录一下吧。</p>
<p>其实问题就在于<strong>填写mail配置的地方不对</strong></p>
<p>之前我是替换了<code>development</code>节点里的配置。其实，正确的地方是在开头第一个节点<code>production</code>里的<code>mail:{}</code>,把它替换成配置的信息就好了。（这可能跟node.js运行模式的选择有关，我在第一篇文章里有提过，在守护进程里设置的是<strong>production</strong>）</p>
<p>配置代码片段如下：</p>
<pre><code>mail: {
         transport: &apos;SMTP&apos;,
         from: &apos;杨舜杰博客 &lt;blog@yangshunjie.com&gt;&apos;, //发件人
         options: {
              host: &apos;smtp.yangshunjie.com&apos;,//我已经将自己的域名绑定到了阿里云的企业邮箱
              secureConnection: false, //不使用SSL                     
              port: 25,//端口
              auth: {
                  user: &apos;blog@yangshunjie.com&apos;, //邮箱地址
                  pass: &apos;********&apos;  //密码
              }
          }
      },
</code></pre><p>最后重启一下ghost,一按找回密码，好了，收到邮件了，密码重置了，这篇博文也写完了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前天由于回到学校，用回了我的Pocker2机械键盘，在输入密码时连续不知道大小写切换键换了地方，连续输错了密码，帐号被封了……&lt;/p&gt;
&lt;p&gt;Ghost也是的，连博客主人的号都能封，还不能（也可能是我不会）通过操作服务器（比如Wordpress能通过删除配置文件）来重置密码
    
    </summary>
    
    
      <category term="
- ghost
- smtp" scheme="https://elderjames.github.io/tags/ghost-smtp/"/>
    
  </entry>
  
  <entry>
    <title>Framework7多视图（View）工具栏布局</title>
    <link href="https://elderjames.github.io/2015/10/10/the-multiple-views-structure-on-framework7.html"/>
    <id>https://elderjames.github.io/2015/10/10/the-multiple-views-structure-on-framework7.html</id>
    <published>2015-10-10T15:33:25.000Z</published>
    <updated>2015-10-10T16:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>HiApp 可以算是一个比较完整的App，其中有很多能够学习的地方，比如它用的RequireJS 、它的界面交互等等，而对于初学者来说，它的布局结构是很值得学习的。因为它的结构是目前绝大多数App的常用布局，分为顶部导航栏Navbar，中 部多个视图View，底部是切换view的工具栏Toolbar。</p>
<p>它的特殊之处在于在界面首层显示了工具栏，而且4个view的底部都是给工具栏空出了位置，而进入到第二层以后，就自动隐藏了工具栏，view内的页 面没有给工具栏留出位置。这是一个很巧妙的结构。</p>
<p>在文档里，介绍的布局实例里都没有提及这种布局，所以我才说应该去学习。</p>
<p>但是由于HiApp的模块化结构使得它不易看懂，经过我自己的试验，终于做出了效果大致相同的结构。</p>
<p>用到的结构html是：</p>
<pre><code>&lt;div class=&quot;views  navbar-through tabs&quot;&gt;
    &lt;div id=&quot;view-1&quot; class=&quot;view tab active&quot;&gt;
        &lt;div class=&quot;navbar&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;pages&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;view-2&quot; class=&quot;view tab&quot;&gt;
        &lt;div class=&quot;navbar&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;pages&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;view-3&quot; class=&quot;view tab&quot;&gt;
        &lt;div class=&quot;navbar&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;pages&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;view-4&quot; class=&quot;view tab&quot;&gt;
        &lt;div class=&quot;navbar&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;pages&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Bottom Toolbar--&gt;
    &lt;div class=&quot;bottom-toolbar toolbar tabbar tabbar-labels toolbar-hidden&quot;&gt;
        &lt;div class=&quot;toolbar-inner&quot;&gt;
            &lt;a href=&quot;#view-1&quot; class=&quot;link tab-link active&quot;&gt;
                &lt;i class=&quot;icon-table icon-2x&quot;&gt;&lt;/i&gt;
                &lt;span class=&quot;tabbar-label&quot;&gt;课表&lt;/span&gt;
            &lt;/a&gt;
            &lt;a href=&quot;#view-2&quot; class=&quot;link tab-link&quot;&gt;
                &lt;i class=&quot;icon icon-book icon-2x&quot;&gt;
                    &lt;span class=&quot;badge bg-red&quot;&gt;4&lt;/span&gt;
                &lt;/i&gt;
                &lt;span class=&quot;tabbar-label&quot;&gt;读书&lt;/span&gt;
            &lt;/a&gt;
            &lt;a href=&quot;#view-3&quot; class=&quot;link tab-link&quot;&gt;
                &lt;i class=&quot;icon icon-compass icon-2x&quot;&gt;&lt;/i&gt;
                &lt;span class=&quot;tabbar-label&quot;&gt;发现&lt;/span&gt;
            &lt;/a&gt;
            &lt;a href=&quot;#view-4&quot; class=&quot;link tab-link&quot;&gt;
                &lt;i class=&quot;icon icon-user icon-2x&quot;&gt;&lt;/i&gt;
                &lt;span class=&quot;tabbar-label&quot;&gt;我&lt;/span&gt;
            &lt;/a&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>这里注意几个地方：</p>
<ul>
<li><p>views里添加 navbar-through类,这使得各个view中的页面默认有工具栏布局</p>
</li>
<li><p>toolbar里添加 toolbar-hidden类，这使得toolbar默认关闭，可以给欢迎页面或者登陆页面有全屏的效果。</p>
</li>
</ul>
<p>那么，如何使进入第二层以上的页面隐藏工具栏呢？</p>
<p>首先看看页面布局：</p>
<pre><code>&lt;div class=&quot;pages navbar-through&quot;&gt;
    &lt;div class=&quot;navbar&quot;&gt;
        &lt;div class=&quot;navbar-inner&quot;&gt;
            &lt;div class=&quot;center&quot;&gt;Framework7&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;me&quot; data-page=&quot;Me&quot; class=&quot;page navbar-through no-swipeback&quot;&gt;
        &lt;div class=&quot;page-content contacts-content&quot;&gt;
            ...
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>page中添加no-toolbar类，这使得这个页面有无工具栏布局（底部没有留空），而这仅仅是对page布局有作用，而不会有文档中说的自动隐 藏toolbar效果，因为no-toolbar只会对跟该页面同view下的toolbar起作用，而我们的toolbar不是在view内，而是在各个view之外，所以要隐藏toolbar，还是要靠JS来实现。</p>
<p>因为本人是初学者，看不懂RequireJS ，所以JS部分是我自己写的。<br>而JS的重点就在于，如何监听当前页面是否在首层呢？很容易想到，要Page添加事件，检验一下当前页是否为第一层的页面。但是要监听什么事件呢？</p>
<p>如果是pageInit事件，那么在后退时会出现问题，因为F7为了呈现页面动画切换效果，在返回时会提前初始化前一个页面，比如，页面跳转顺序是A —&gt;B—&gt;C，现在要从C返回B，在返回前，view内会有BC两个页面以供切换，而切换到B的时候，F7会销毁C页面，加载A页面，这时会触发pageInit事件，如果用在pageInit触发时隐藏工具栏，那么当你从C切换到B时，工具栏就隐藏了，显然不符合我们要在A页面隐藏的要求。<br>而pageAfterBack事件是在返回动作完成后触发，这就会使得动画效果不连贯，不美观。</p>
<p>那么，应该用哪个事件呢？</p>
<p>我这里用的是pageBeforeAnimation，在页面加载完成后不触发，等要切换了动画要开始前才触发。这样，我们就能够在进行页面切换 动画的同时进行工具栏显示动画。</p>
<p>而另一个重点是，如何检测页面是否为第一层的页面？</p>
<p>大家都知道，页面事件会传入一个参数e，通过e.detail.page获得pageData，里面包括了name，url等。但是，这个e传的是触发事件的参数，比如从B切换到A，传入的是B页面的参数，所以用name、url等都不能检测出要切换到的页面是否为A页面。但是，当然这个是有解决的办法的。我们从文档中可以找到，PageData中的page.view可以获取当前view，而Views中的View.activePage属性却可以获取当前view的活动页面，也就是说，B切换到A，在动画是在A页面上进行的，活动页是A，所以，这样就能获取到我们要切换到的那个页面的数据了，再进行检验，就OK啦！</p>
<p>好啦，分析完，下面是JS代码</p>
<pre><code> //初始化后动画开始前检测当前视图的活动页，如果是第一层的4个页面，则显示工具栏
$$(document).on(&apos;pageBeforeAnimation&apos;, function (e) {
    var page = e.detail.page.view.activePage;
    if (page.name === &apos;Course&apos; || page.name == &apos;Book&apos; || page.name == &apos;Discover&apos; || page.name == &apos;Me&apos;) {
        myApp.showToolbar(&apos;.toolbar&apos;);
    }
    else {
        myApp.hideToolbar(&apos;.toolbar&apos;);
    }
});
</code></pre><p>好啦，这个问题就解决啦！希望大家多多分享你的经验哦！另外，有问题的话记得先看看文档，因为文档会解决很多问题的！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HiApp 可以算是一个比较完整的App，其中有很多能够学习的地方，比如它用的RequireJS 、它的界面交互等等，而对于初学者来说，它的布局结构是很值得学习的。因为它的结构是目前绝大多数App的常用布局，分为顶部导航栏Navbar，中 部多个视图View，底部是切换vi
    
    </summary>
    
    
      <category term="
- Framework7" scheme="https://elderjames.github.io/tags/Framework7/"/>
    
  </entry>
  
</feed>
